version: '3.8'

services:
  app:
    build: .
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Cron service using Alpine Linux with curl
  cron:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo '0 */6 * * * curl -s -X GET http://app:3000/api/cron/update-wattpad-stats -H \"Authorization: Bearer $${CRON_SECRET}\" > /dev/null 2>&1' > /etc/crontabs/root &&
        crond -f -l 8
      "
    environment:
      - CRON_SECRET=${REVALIDATE_SECRET}
    depends_on:
      - app
    restart: unless-stopped
    volumes:
      - ./logs:/var/log

  # Alternative: Node.js cron service
  cron-node:
    build: .
    command: ['node', 'scripts/cron-runner.mjs']
    environment:
      - NODE_ENV=production
      - CRON_INTERVAL=21600000
      - SITE_URL=http://app:3000
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - cron-node # Use: docker-compose --profile cron-node up
